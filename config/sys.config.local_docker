[
    {dog_trainer, [
        {env, "t1"},
        {auto_register_hosts, true},
        {aws_key,""},
        {aws_secret,""},
        {command_execution_timeout_ms,10000},
        {file_delete_timeout_ms, 5000},
        {file_transfer_timeout_ms, 30000},
        {version, "local_docker"},
        {smtp_relay, ""},
        {smtp_username, "" },
        {smtp_password, "" },
        {smtp_to, []},
        {smtp_from, ""},
        {polling_interval_seconds, 60},
        {keepalive_alert_seconds, 1800},
        {hashcheck_alert_seconds, 180},
        {rethinkdb_host, "rethinkdb"},
        {rethinkdb_port, 28015},
        {rethinkdb_username, "admin"},
        {rethinkdb_password, ""},
        {rethink_timeout_ms, 10000},
        {rethink_squash_sec, 1.0},
        {profile_periodic_publish_interval_seconds, 5},
        {ipset_periodic_publish_interval_seconds, 5},
        {check_v6_hashes, true},
        {generate_unset_tables, false},
        {max_interval_since_last_agent_update,2},
        {rethinkdb_pools, [
            {rethinkdb_pool1, [
                {size, 10},
                {max_overflow, 20}
            ], []}
        ]},
        {file_transfer_pools, [
            {file_transfer_pool1, [
                {size, 10},
                {max_overflow, 20}
            ], []}
        ]}
    ]},
    {kernel,
        [ {logger_level, all},
        {logger, [
            {handler, access_logger, logger_disk_log_h, #{
                    level => debug,
                    config =>
                        #{
                            file => "/var/log/dog_trainer/access_log.json",
                            type => wrap,
                            max_no_files => 10,
                            max_no_bytes => 52428800 % 10 x 5mb
                        },
                   filters => [
                             {filter, {fun logger_filters:domain/2, {log, equal,
                                                                      [cowboy_access_log]}}},
                              {non_filter, {fun logger_filters:domain/2, {stop, undefined, []}}}
                              ],
                    formatter => {logger_logstash_formatter, #{}}
            }},
            {handler, default, logger_std_h,
                #{
                    filters => [
                               {disk_log_debug1, {fun logger_filters:domain/2, {log, not_equal,
                                                                               [cowboy_access_log]}}},
                               {disk_log_debug2, {fun logger_filters:domain/2, {stop, equal,
                                                                               [cowboy_access_log]}}}
                               ],
                    level => error,
                    legacy_header => false,
                    single_line => false,
                    formatter => {logger_logstash_formatter, #{}}
            }},
            {handler, disk_log_debug, logger_disk_log_h,
                #{
                    config =>
                        #{
                            file => "/var/log/dog_trainer/debug.log",
                            type => wrap,
                            max_no_files => 10,
                            max_no_bytes => 52428800 % 10 x 5mb
                        },
                    filters => [
                               {disk_log_debug1, {fun logger_filters:domain/2, {log, not_equal,
                                                                               [cowboy_access_log]}}},
                               {disk_log_debug2, {fun logger_filters:domain/2, {stop, equal,
                                                                               [cowboy_access_log]}}}
                               ],
                    level => debug,
                    formatter => {flatlog,
                        #{
                            map_depth => 3,
                            term_depth => 50
                        }
                }}},
            {handler, disk_log_error, logger_disk_log_h,
                #{
                    config =>
                        #{
                            file => "/var/log/dog_trainer/error.log",
                            type => wrap,
                            max_no_files => 10,
                            max_no_bytes => 52428800 % 10 x 5mb
                        },
                    filters => [
                               {disk_log_debug1, {fun logger_filters:domain/2, {log, not_equal,
                                                                               [cowboy_access_log]}}},
                               {disk_log_debug2, {fun logger_filters:domain/2, {stop, equal,
                                                                               [cowboy_access_log]}}}
                               ],
                    level => error,
                    formatter => {flatlog,
                        #{
                            map_depth => 3,
                            term_depth => 50
            }}}}
]
  }]},
    {sync, [
        {growl, none},
        {log, [warnings, errors]},
        {non_descendants, fix},
        {executable, auto},
        {whitelisted_modules, []},
        {excluded_modules, []}
    ]},
    {turtle, [
        {connection_config, [
            #{
                conn_name => default,

                username => "guest",
                password => "guest",
                virtual_host => "dog",
                ssl_options => [
                               {cacertfile, "/etc/dog_trainer/certs/ca.crt"},
                               {certfile,   "/etc/dog_trainer/certs/server.crt"},
                               {keyfile,    "/etc/dog_trainer/private/server.key"},
                               {verify, verify_peer},
                               {server_name_indication, disable},
                               {fail_if_no_peer_cert, true}
                              ],
                deadline => 300000,
                connections => [
                    {main, [
                      {"rabbitmq", 5673 }
                    ]}
                ]
            }
        ]}
    ]}
].
